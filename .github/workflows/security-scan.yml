name: Security Scan

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  security-scans:
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: 23
          architecture: x64
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build with Maven
        run: mvn --no-transfer-progress install -DskipTests

        # Snyk Scan
      - name: Snyk Scan
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

        # Analyze with SonarQube
      - name: Sonar Scan
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=alexpakt_WebGoat

        # Analyze secrets with TruffleHog
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.90.6
        continue-on-error: true
        with:
          path: .
          extra_args: --results=verified,unknown

        # Build the docker image and run the container
      - name: Build WebGoat Docker image and run the container
        run: |
          docker build -t webgoat:latest .
          docker run -d --name webgoat_container -p 8080:8080 -p 9090:9090 webgoat:latest

        # Install nmap and scan for open ports
      - name: Install Nmap
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap

      - name: Run Nmap Scan against the container
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' webgoat_container)
          echo "Scanning $CONTAINER_IP"
          nmap -p- -sV -T4 "$CONTAINER_IP"

        # ZAP Scan
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:8080'

      - name: Stop and remove container
        run: docker rm -f webgoat_container
